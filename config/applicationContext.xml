<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 由spring框架负责加载jdbc属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
						
	<!-- 数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${driverClass}"/>
		<property name="jdbcUrl" value="${jdbcUrl}"/>
		<property name="user" value="${user}"/>
		<property name="password" value="${password}"/>
	</bean>
	
	<!-- spring提供的用于整合hibernate框架的LocalSessionFactoryBean -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- hibernate相关配置 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- hibernate的hbm文件 -->
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:cn/itcast/bos/domain</value>
			</list>
		</property>
	</bean>
	
	<!-- 事务管理器 -->
	<bean id="transcationManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 注解配置 -->
	<!-- 组件扫描 -->
	<context:component-scan base-package="cn.itcast.bos"/>
	<!-- 引入spring提供的注解解析器 -->
	<context:annotation-config/>
	
	<!-- 事务注解 -->
	<tx:annotation-driven transaction-manager="transcationManager"/>
	
	<!-- 配置远程服务的代理对象 -->
	<bean id="customerService" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">
		<!-- 注入接口类型，spring可以针对这个接口创建代理对象，使用jdk动态代理 -->
		<property name="serviceInterface" value="cn.itcast.crm.CustomerService"/>
		<!-- 注入服务的请求地址 -->
		<property name="serviceUrl" value="http://localhost:8080/crm/remoting/customer"/>
	</bean>
	
	<!-- 配置框架提供的一个过滤器工厂bean，用于创建shiro框架使用的过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 注入登录页面访问URL -->
		<property name="loginUrl" value="/login.jsp"/>
		<!-- 注入成功页面访问URL -->
		<property name="successUrl" value="/index.jsp"/>
		<!-- 权限不足提供页面访问URL -->
		<property name="unauthorizedUrl" value="/unauthorized.jsp"/>
		<!-- 注入安全管理器 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 注入URL拦截规则 -->
		<property name="filterChainDefinitions">
			<value>
				/css/** = anon
				/js/** = anon
				/images/** = anon
				/validatecode.jsp* = anon
				/login.jsp* = anon
				/userAction_login.action = anon
				/page_base_staff.action = perms["staff"]
				/** = authc
			</value>
		</property>
	</bean>
	
	<!-- 注册安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 注入自定义的realm -->
		<property name="realm" ref="bosRealm"/>
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"/>
	</bean>
	
	<!-- 注册一个缓存管理器 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 注入ehcache的xml配置文件 -->
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
	</bean>
	
	<!-- 注册自定义realm -->
	<bean id="bosRealm" class="cn.itcast.bos.shiro.BOSRealm"></bean>
	
	<!-- 自动代理 -->
	<bean id="defaultAdvisorAutoProxyCreator" 
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		<!-- 强制使用cglib为Action创建代理对象 -->
		<property name="proxyTargetClass" value="true"/>
	</bean>
	
	<!-- 切面类 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"/>
	
	<!-- Activiti相关配置 -->
	<!-- 配置Activiti框架的流程引擎配置对象 -->
	<bean id="processEngineConfiguration" 
		class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource"/>
		<!-- 注入事务管理器 -->
		<property name="transactionManager" ref="transcationManager"/>
		<!-- 配置自动建表 -->
		<property name="databaseSchemaUpdate" value="false"/>
	</bean>
	
	<!-- 配置流程引擎工厂bean，用于创建一个流程引擎对象 -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<!-- 注入上面的配置对象 -->
		<property name="processEngineConfiguration" ref="processEngineConfiguration"/>
	</bean>

	<!-- 创建Activiti框架的Service对象：RepositoryService  RuntimeService TaskService IdentityService -->
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"></bean>
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"></bean>
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"></bean>
	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"></bean>
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"></bean>
</beans>
